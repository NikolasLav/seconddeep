""" –ë–æ—Ç, –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ """
from config import bot_config as config
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id, json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import psycopg2
import time
from manage import get_ready_to_search as prepare, get_cities, get_user_info, prepare_results
import db

user_token = config['user_token']
group_token = config['group_token']
group_id = config['group_id']

vku_session = vk_api.VkApi(token=user_token, api_version='5.131')
vkg_api = vk_api.VkApi(token=group_token).get_api()

# –õ–æ–Ω–≥–ø–æ–ª–ª –ë–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ VkBotEventType
bot_longpoll = VkBotLongPoll(vk_api.VkApi(token=group_token), group_id)
# –õ–æ–Ω–≥–ø–æ–ª–ª –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ VkEventType
longpoll = VkLongPoll(vk_api.VkApi(token=group_token))


""" –ë–æ—Ç """
class Bot:

    """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è """
    def __init__(self) -> None:
        # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.checklist = ['id', 'city', 'relation', 'sex', 'first_name', 'last_name',
                          'age_from', 'age_to']
        # –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ä–æ–¥–µ :)
        self.users = {}

    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ë–î """
    def _check_db(self, user) -> any:
        try:
            with start_db() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ë–î, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                check = db.db_check(conn)
                if check == 'error':
                    message_send(
                        user, "‚õî –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –±–∞–∑–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
                # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'check' –µ—Å–ª–∏ –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
                elif check == 'check':
                    message_send(user, "‚úÖ –ë–∞–∑–∞–¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
                elif check == 'empty':
                    message_send(user, "‚ùó –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
                    try:
                        db.create_db(conn)
                        message_send(user, "‚úÖ –ë–∞–∑–∞–¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
                    except:
                        message_send(user, "‚õî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        except:
            check == 'error'
            message_send(
                user, "‚õî –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –±–∞–∑–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        return check

    """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    def _initial(self, user) -> None:
        userdata = get_user_info(user['id'], vku_session.get_api())
        if userdata is None:
            message_send(
                user, '‚õî –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∫–∏ access_token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        else:
            user.update(userdata)
            user.pop('is_closed')
            user.pop('can_access_closed')
            userdata_check = True
            # –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ü–∏–∫–ª–µ
            while userdata_check:
                userdata_check, user = self._supplement_userdata(user)

    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç """
    def _supplement_userdata(self, user, initial=True) -> tuple[bool, any]:
        need_to_supplement = True
        if initial:
            msg = "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
        else:
            msg = "–î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
        while need_to_supplement:
            to_supplement = list(
                filter(lambda parametr: parametr not in list(user), self.checklist))
            if ('age_from' not in to_supplement) and ('age_to' not in to_supplement):
                try:
                    if user['age_from'] > user['age_to']:
                        user['age_from'] = None
                        user['age_to'] = None
                        message_send(
                            user, '–í–æ–∑—Ä–∞—Å—Ç "–î–û" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ "–û–¢".')
                        to_supplement += ['age_from', 'age_to']
                except:
                    pass
            if len(to_supplement) > 0:
                message_send(user, msg)
                msg = '–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å... –î–∞–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏–º. –°–µ—Ä–¥–µ—á–Ω–æ –ø—Ä–æ—à—É –í–∞—Å –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ :). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,'
                for item in to_supplement:
                    user.update(supplement_dict[item](item,user))
            else:
                need_to_supplement = False
        return need_to_supplement, user

    """ –∞–∫—Ç–∏–≤–∞—Ü–∏—è "—Å–ª—É—à–∞—Ç–µ–ª–µ–π" """
    def activate(self) -> None:
        for event in bot_longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_EVENT:  # –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏–≤–µ–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                event_id = event.object.event_id,
                user_id = event.object.user_id,
                peer_id = event.object.user_id,
                func = event.object.payload['text']
                event.object.payload['text'] = self.ex[func]['description']
                event_data = json.dumps(event.object.payload)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ callback –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π.
                vkg_api.messages.sendMessageEventAnswer(
                    event_id=event_id,
                    user_id=user_id,
                    peer_id=peer_id,
                    event_data=event_data)
                if func in self.ex:
                    user = self.users.setdefault(list(user_id)[0], dict())
                    self.ex[func]['func'](self, user)
                # –∫–æ–ª—Ö–æ–∑–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ)
                if func == 'stop':
                    break
            if event.type == VkBotEventType.MESSAGE_TYPING_STATE:
                # –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
                if event.obj['from_id'] != -group_id:
                    user = self.users.setdefault(event.obj['from_id'], dict())
                    value = {'id': event.obj['from_id']}
                    if len(user) == 0:  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ
                        user.update(value)
                        keyboard_send(user, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", switch=False)
                        checkbd = self._check_db(user)
                        if checkbd != 'error':
                            self._initial(user)
                            keyboard_send(
                                user, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã V_–ö_i_n_d_–µ_r –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
                            message_send(user,
                                         '‚úÖ –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö".')
                            with start_db() as conn:
                                prepare(conn, user, vku_session)
            if event.type == 'like_add':
                try:
                    db.update_results(
                        conn, profile_id=user['last_search'], user_id=event.object['liker_id'], favorite=True)
                except:
                    pass
            if event.type == 'like_remove':
                try:
                    db.update_results(
                        conn, profile_id=user['last_search'], user_id=event.object['liker_id'], favorite=False)
                except:
                    pass

    """ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ """
    def stop(self, user) -> None:
        with start_db() as conn:
            try:
                # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                db.remove_from_temp(conn, user['id'], profile_id=None)
                # –æ—á–∏—Å—Ç–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                db.del_results(conn, user['id'], temp=True)
            except:
                pass
        keyboard_send(user, "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞—Ö–æ–¥–∏—Ç–µ –µ—â—ë! ü§ó", switch=False)

    """ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ """
    def settings(self, user) -> None:
        message_send(user, f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user['last_name']} {user['first_name']}
–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞: {user['city']['title']}
–í–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞: –æ—Ç {user['age_from']} –¥–æ {user['age_to']}""")
        keyboard_send(
            user, "–ê –≤–æ—Ç —á—Ç–æ –º—ã —É–º–µ–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥):", False)
        message_send(user, f"""- –≤–æ–∑—Ä–∞—Å—Ç (–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ "–û–¢" –∏ "–î–û")
- –≥–æ—Ä–æ–¥ (–∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞)
- –æ—á–∏—Å—Ç–∏—Ç—å (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –ø–æ–∏—Å–∫–æ–≤)
–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?""")
        # - –≥–æ—Ä–æ–¥ (–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞)
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    command = event.text.lower()
                    if command == '–≤–æ–∑—Ä–∞—Å—Ç':
                        user.pop('age_from', None)
                        user.pop('age_to', None)
                        break
                    if command == '–≥–æ—Ä–æ–¥':
                        user['city'].pop('id', None)
                        user['city'].pop('title', None)
                        user.pop('city', None)
                        break
                    if command == '–æ—á–∏—Å—Ç–∏—Ç—å':
                        with start_db() as conn:
                            db.del_results(conn, user['id'])
                            message_send(user, '–°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω.')
                            prepare(conn, user, vku_session)
                        conn.close()
                        break
                    elif command == '–Ω–∏—á–µ–≥–æ':
                        break
                    else:
                        message_send(
                            user, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ï—Å–ª–∏ –ù–ò–ß–ï–ì–û –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ :). –ò—Ç–∞–∫, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?')
        to_supplement = list(
            filter(lambda parametr: parametr not in list(user), self.checklist))
        # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
        if len(to_supplement) > 0:
            self._supplement_userdata(user, initial=False)
            with start_db() as conn:
                """ 
                1) –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                2) —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å
                3) —Å–Ω–æ–≤–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—ã–≤–æ–¥
                """
                db.remove_from_temp(conn, user['id'], profile_id=None)
                db.del_results(conn, user['id'], temp=True)
                prepare(conn, user, vku_session)
            keyboard_send(
                user, '–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—É üòâ')
            conn.close()
        else:
            keyboard_send(user, '–û–∫. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏.')
        return

    """ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    def search(self, user) -> None:
        message_send(user, "–°–µ–∫—É–Ω–¥–æ—á–∫—É...")
        with start_db() as conn:
            person = db.get_results(conn, user_id=user['id'], not_seen=True)
            if (person is not None) and (len(person) > 0):
                id = person[1]
                user.update({'last_search': id})
                photos = person[3].split(',')
                attachment = f'photo{id}_'+f',photo{id}_'.join(photos)
                url = "http://vk.com/id"+str(id)
                message_send(user, f"""{person[2]} {url}
                –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –ò–ó–ë–†–ê–ù–ù–û–ï –æ—Å—Ç–∞–≤—å—Ç–µ ‚ù§ –ª–∞–π–∫ –Ω–∞ –ª—é–±–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞).
                """, attachment)
                if person[4] is None or person[4] == '':
                    pass
                else:
                    marked = person[4].split(',')
                    favorite_attachments = []
                    urls = []
                    for item in range(0, len(marked), 2):
                        attachment = f'photo{marked[item]}_{marked[item+1]}'
                        favorite_attachments.append(attachment)
                        urls.append("http://vk.com/"+attachment)
                    urls = ('\n').join(urls)
                    message_send(user, f"""–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏:
                    (–≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ—Ç—É;
                    –ø–æ —Å—Å—ã–ª–∫–∞–º –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª.)
                    {urls}""", (',').join(favorite_attachments))
                # –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–¥–∞—á—É
                db.update_results(
                    conn, profile_id=person[1], user_id=user['id'], seen=True)
                # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—ã–¥–∞—á—É
                prepare_results(conn, user['id'], vku_session)
            else:
                message_send(
                    user, f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—É—Å—Ç, –ª–∏–±–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —É –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")

    """ –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ò–ó–ë–†–ê–ù–ù–´–• """
    def show_favorite(self, user) -> None:
        message_send(user, "–°–ø–∏—Å–æ–∫ –ò–ó–ë–†–ê–ù–ù–´–• –∞–Ω–∫–µ—Ç")
        persons = ''
        with start_db() as conn:
            favorite_profiles = db.get_results(
                conn, user_id=user['id'], favorite=True)
            if len(favorite_profiles) > 0:
                for favorite in favorite_profiles:
                    persons += favorite[2] + \
                        " http://vk.com/id"+str(favorite[1])+'\n'
                message_send(user, persons)
            else:
                message_send(user, "–ü–æ–∫–∞ –µ—â—ë –ø—É—Å—Ç.")

    """ –°–ª–æ–≤–∞—Ä—å callback-—Ñ—É–Ω–∫—Ü–∏–π (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏) """
    ex = {
        'stop': {'func': stop, 'description': '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞'},
        'settings': {'func': settings, 'description': '–ú–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
        'search': {'func': search, 'description': '–ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫...'},
        'show_favirits': {'func': show_favorite, 'description': '–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö'}
    }


""" –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä """
def keyboard_send(user, msg, switch=True) -> None:  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    settings = dict(one_time=False, inline=False)
    keyboard = VkKeyboard(**settings)
    if switch:
        keyboard.add_callback_button(label='–ü–æ–∏—Å–∫ –ø–∞—Ä—ã', color=VkKeyboardColor.PRIMARY,
                                     payload={"type": "show_snackbar", "text": "search"})
        keyboard.add_line()
        keyboard.add_callback_button(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', color=VkKeyboardColor.PRIMARY,
                                     payload={"type": "show_snackbar", "text": "settings"})
        keyboard.add_callback_button(label='–ò–∑–±—Ä–∞–Ω–Ω—ã–µ', color=VkKeyboardColor.PRIMARY,
                                     payload={"type": "show_snackbar", "text": "show_favirits"})
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        keyboard.add_line()
        keyboard.add_callback_button(label='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', color=VkKeyboardColor.SECONDARY,
                                     payload={"type": "show_snackbar", "text": "stop"})
    attempt = 0
    while True and attempt < 3:  # 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è —Ä–∞–±–æ—Ç—ã –í–ö
        try:
            if switch:
                vkg_api.messages.send(user_id=user['id'], title=msg, message='&#13;',  random_id=get_random_id(
                ), keyboard=keyboard.get_keyboard())
            else:
                vkg_api.messages.send(user_id=user['id'], title=msg, message='&#13;',  random_id=get_random_id(
                ), keyboard=keyboard.get_empty_keyboard())
            break
        except:
            attempt += 1
            # –Ω–∞–¥–æ –±—ã–ª–æ –ª–æ–≥–≥–µ—Ä –∏–∑—É—á–∏—Ç—å, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –Ω–µ —É—Å–ø–µ–ª.
            print(
                user['id'], f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Ññ{attempt}.")
            time.sleep(1)


""" –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π """
def message_send(user, msg, attachment=None) -> None:  # —Å–æ–æ–±—â–µ–Ω–∏—è
    attempt = 0
    while True and attempt < 3:  # 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è —Ä–∞–±–æ—Ç—ã –í–ö
        try:
            if attachment == None:
                vkg_api.messages.send(
                    user_id=user['id'], message=msg,  random_id=get_random_id())
                break
            else:
                vkg_api.messages.send(
                    user_id=user['id'], message=msg,  random_id=get_random_id(), attachment=attachment)
                break
        except:
            attempt += 1
            # –Ω–∞–¥–æ –±—ã–ª–æ –ª–æ–≥–≥–µ—Ä –∏–∑—É—á–∏—Ç—å, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –Ω–µ —É—Å–ø–µ–ª.
            print(
                user['id'], f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Ññ{attempt}.")
            time.sleep(1)


""" –°–µ—Å—Å–∏—è –ë–î """
def start_db() -> any:  # —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    return psycopg2.connect(database=config['pgbase'], user="postgres", password=config['pgpwd'])


""" –£—Ç–æ—á–Ω—è–µ–º –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é """
def name_sup(item, user, longpoll) -> object:
    new_value = None
    while new_value is None:
        if item == 'first_name':
            name_type = '—Å–≤–æ—ë –∏–º—è'
        else:
            name_type = '—Ñ–∞–º–∏–ª–∏—é'
        message_send(user, f"—É—Ç–æ—á–Ω–∏—Ç–µ {name_type}: ")
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    new_value = event.text.capitalize()
                    break
    new_value = {item: new_value}
    return new_value


""" –£—Ç–æ—á–Ω—è–µ–º –≥–æ—Ä–æ–¥ """
def city_sup(item, user, longpoll) -> object:
    new_value = None
    while new_value is None:
        message_send(
            user, '—É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏–ª–∏ –µ–≥–æ ID (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ): ')
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    try:
                        cities = get_cities(
                            vku_session.get_api(), event.text.lower())
                        if len(cities) > 1:
                            message_send(user, '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤:')
                            for city in cities[0:5]:
                                try:
                                    message_send(
                                        user, f"(ID={city['id']}). {city['title']} ({city['region']}, {city['area']})")
                                except:
                                    message_send(
                                        user, f"(ID={city['id']}). {city['title']}")
                            city = cities
                            message_send(user,
                            """–ü–æ–∫–∞ –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.
                            –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω–µ–µ - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫, –Ω–æ —É–∫–∞–∂–∏—Ç–µ —É–∂–µ ID.""")
                        else:
                            city = cities
                        new_value = {
                            'id': city[0]['id'], 'title': city[0]['title']}
                        message_send(
                            user, f"–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≥–æ—Ä–æ–¥: (ID={city[0]['id']}) {city[0]['title']}")
                    except:
                        message_send(
                            user, '–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ ID.')
                    finally:
                        break
    new_value = {item: new_value}
    return new_value


""" –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π """
def rel_sup(item, user, longpoll) -> object:
    new_value = None
    while new_value is None:
        message_send(user, 
            f"""—É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π:
            (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É
            1 ‚Äî –Ω–µ –∂–µ–Ω–∞—Ç (–Ω–µ –∑–∞–º—É–∂–µ–º),
            2 ‚Äî –≤—Å—Ç—Ä–µ—á–∞—é—Å—å,
            3 ‚Äî –ø–æ–º–æ–ª–≤–ª–µ–Ω(-–∞),
            4 ‚Äî –∂–µ–Ω–∞—Ç (–∑–∞–º—É–∂–µ–º),
            5 ‚Äî –≤—Å—ë —Å–ª–æ–∂–Ω–æ,
            6 ‚Äî –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ,
            7 ‚Äî –≤–ª—é–±–ª–µ–Ω(-–∞),
            8 ‚Äî –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ)""")
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    try:
                        new_value = int(event.text)
                        if new_value not in range(0, 9):
                            message_send(
                                user, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É.')
                            new_value = None
                    except:
                        message_send(
                            user, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É.')
                    finally:
                        break
    new_value = {item: new_value}
    return new_value


""" –£—Ç–æ—á–Ω—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –ø–æ–ª—É """
def sex_sup(item, user, longpoll) -> object:
    new_value = None
    while new_value is None:
        message_send(user, "—É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–ª (–≤–≤–µ–¥–∏—Ç–µ –ú –∏–ª–∏ –ñ): ")
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    new_value = event.text.lower()
                    break
        if new_value in ('–º', '–∂'):
            if new_value == '–º':
                new_value = 2
            elif new_value == '–∂':
                new_value = 1
        else:
            message_send(user, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.')
            new_value = None
    new_value = {item: new_value}
    return new_value


""" –£—Ç–æ—á–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞ """
def age_sup(item, user, longpoll) -> object:
    new_value = None
    while new_value is None:
        if item == 'age_from':
            age_type = '–û–¢'
        else:
            age_type = '–î–û'
        message_send(user, f'—É–∫–∞–∂–∏—Ç–µ "{age_type}" –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏—â–µ–º –ø–∞—Ä—É: ')
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    try:
                        new_value = int(event.text)
                    except:
                        message_send(
                            user, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
                    finally:
                        break
    new_value = {item: new_value}
    return new_value


""" –°–ª–æ–≤–∞—Ä–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π """
supplement_dict = {
    'city': city_sup,
    'relation': rel_sup,
    'sex': sex_sup,
    'first_name': name_sup,
    'last_name': name_sup,
    'age_from': age_sup,
    'age_to': age_sup,
}
